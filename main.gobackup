package main

import (
	"context"
	"fmt"
	"log"
	"strconv"
	"time"

	"cloud.google.com/go/storage"
	"github.com/go-redis/redis/v8"
	"google.golang.org/api/iterator"
)

func initializeRedisClient() *redis.Client {
	rdb := redis.NewClient(&redis.Options{
		Addr: "34.142.141.15:6379",
	})

	return rdb
}

func countFilesInBucket(bucketName, srcPrefix string) (int, error) {
	ctx := context.Background()
	client, err := storage.NewClient(ctx)
	if err != nil {

		return 0, fmt.Errorf("storage.NewClient: %v", err)
	}
	defer client.Close()

	bucket := client.Bucket(bucketName)
	query := &storage.Query{Prefix: srcPrefix}

	count := 0

	it := bucket.Objects(ctx, query)
	for {
		objAttrs, err := it.Next()
		if err == iterator.Done {
			break
		}
		fmt.Print(objAttrs)
		if err != nil {
			return 0, fmt.Errorf("iterating object: %v", err)
		}
		count++
	}

	return count, nil
}

func getValueFromRedis(rdb *redis.Client, key string) (int, error) {
	ctx := context.Background()
	val, err := rdb.Get(ctx, key).Result()
	if err != nil {
		if err == redis.Nil {
			return 0, nil
		}
		return 0, fmt.Errorf("error getting value from redis: %v", err)
	}

	intVal, err := strconv.Atoi(val)
	if err != nil {
		return 0, fmt.Errorf("error converting redis value to int: %v", err)
	}
	return intVal, nil
}

func moveFilesToBucket(scrBucketName, destBucketName, srcPrefix, destPrefix string) error {
	ctx := context.Background()

	client, err := storage.NewClient(ctx)
	if err != nil {
		return fmt.Errorf("storage NewClient: %v", err)
	}
	defer client.Close()

	srcBucket := client.Bucket(scrBucketName)
	destBucket := client.Bucket(destBucketName)

	query := &storage.Query{Prefix: srcPrefix}

	it := srcBucket.Objects(ctx, query)
	for {
		objAttrs, err := it.Next()
		if err == iterator.Done {
			break
		}
		// if err != nil {
		// 	return fmt.Errorf("iterating objects: %v", err)
		// }

		destObjectName := destPrefix + objAttrs.Name[len(srcPrefix):]

		_, err = destBucket.Object(destObjectName).CopierFrom(srcBucket.Object(objAttrs.Name)).Run(ctx)
		if err != nil {
			return fmt.Errorf("copying object %s to %s: %v", objAttrs.Name, destObjectName, err)
		}

		// Optionally, delete the original object after copying
		err = srcBucket.Object(objAttrs.Name).Delete(ctx)
		if err != nil {
			return fmt.Errorf("deleting original object %s: %v", objAttrs.Name, err)
		}

		fmt.Printf("Moved %s to %s\n", objAttrs.Name, destObjectName)
	}
	return nil
}

func deleteFilesWithPrefix(bucketName, prefix string) error {
	ctx := context.Background()
	client, err := storage.NewClient(ctx)
	if err != nil {
		return fmt.Errorf("storage.NewClient: %v", err)
	}
	defer client.Close()

	bucket := client.Bucket(bucketName)
	query := &storage.Query{Prefix: prefix}

	it := bucket.Objects(ctx, query)
	for {
		objAttrs, err := it.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			return fmt.Errorf("iterating objects: %v", err)
		}

		// Delete the object with the specified prefix
		err = bucket.Object(objAttrs.Name).Delete(ctx)
		if err != nil {
			return fmt.Errorf("deleting object %s: %v", objAttrs.Name, err)
		}

		fmt.Printf("Deleted %s\n", objAttrs.Name)
	}

	return nil
}

func main() {
	bucketName := "tf_gke_bucket2"
	destBucketName := "backup-stream-kafka"
	srcPrefix := "messages/2024-10-06/"
	destPrefix := "backup/messages/2024-10-05/"

	count, err := countFilesInBucket(bucketName, srcPrefix)
	if err != nil {
		log.Fatal("Failed to count files in bucket: %v", err)
	}
	fmt.Println("Total files in bucket '%s': %d\n ", bucketName, count)

	today := time.Now().Format("2006-01-02")
	redisKey := fmt.Sprintf("datatest_ingestion_count:%v", today)
	fmt.Println(redisKey)

	rdb := initializeRedisClient()
	defer rdb.Close()

	count_redis, err := getValueFromRedis(rdb, redisKey)

	fmt.Printf("Total row in redis %v", count_redis)

	if count == count_redis {
		fmt.Printf("The count file matches %v : %v", count, count_redis)
		err = moveFilesToBucket(bucketName, destBucketName, srcPrefix, destPrefix)
		if err != nil {
			log.Fatalf("Failed to move files: %v", err)
		}
	} else {
		fmt.Printf("The count file NOT matches %v : %v", count, count_redis)
	}

	choose_delete := true // Should be asked on survey either data moved or to be full deleted

	if choose_delete {
		err = deleteFilesWithPrefix(bucketName, srcPrefix)
		if err != nil {
			log.Fatalf("Failed to delete files: %v", err)
		}
	}

}
